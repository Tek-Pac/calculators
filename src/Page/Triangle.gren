module Page.Triangle exposing ( Model, Msg(..), update, view, queryParser, queryBuilder )

{-| The triangle calculator page
-}

import Browser
import Browser.Dom as Dom
import Html exposing ( Html, a, br, button, div, h1, input, text )
import Html.Attributes exposing ( class, href, id, readonly, step, style, tabindex, type_, value )
import Html.Events exposing ( onClick, onInput )
import Math
import SpaCmd exposing ( SpaCmd(..) )
import Svg exposing ( Svg, feComposite, feFlood, feGaussianBlur, feOffset, filter, foreignObject, polygon, svg )
import Svg.Attributes exposing ( dx, dy, fill, floodColor, floodOpacity, height, in2, in_, operator, points, result, stdDeviation, stroke, strokeLinejoin, strokeWidth, viewBox, width, x, y )
import Task
import Url.Builder as Builder
import Url.Parser.Query as Query


queryParser : Query.Parser Model
queryParser =
    Query.map4 finishParse (Query.string "a") (Query.string "b") (Query.string "c") (Query.string "theta")


finishParse : Maybe String -> Maybe String -> Maybe String -> Maybe String -> Model
finishParse a b c theta =
    { a = Maybe.withDefault "" a
    , b = Maybe.withDefault "" b
    , c = Maybe.withDefault "" c
    , theta = Maybe.withDefault "" theta
    }


builderStr : String -> String -> String -> Maybe Builder.QueryParameter
builderStr default key val =
    if val == default then
        Nothing
    else
        Just (Builder.string key val)


queryBuilder : Model -> Array Builder.QueryParameter
queryBuilder model =
    [ builderStr "" "a" model.a
    , builderStr "" "b" model.b
    , builderStr "" "c" model.c
    , builderStr "" "theta" model.theta
    ]
        |> Array.mapAndKeepJust identity


type alias Model =
    { a : String
    , b : String
    , c : String
    , theta : String
    }


type alias Updated =
    { model : Model
    , command : SpaCmd Msg
    }


type Msg
    = UpdateA String
    | UpdateB String
    | UpdateC String
    | UpdateTheta String
        -- id
    | DoCopy String
    | NoOp


attemptFocus : String -> SpaCmd Msg
attemptFocus id =
    BaseCmd (Task.attempt (\_ -> NoOp) (Dom.focus id))


update : Msg -> Model -> Updated
update msg model =
    when msg is
        NoOp ->
            { model = model
            , command = SpaCmd.none
            }

        UpdateA s ->
            { model = { model | a = s }
            , command = attemptFocus "a"
            }

        UpdateB s ->
            { model = { model | b = s }
            , command = attemptFocus "b"
            }

        UpdateC s ->
            { model = { model | c = s }
            , command = attemptFocus "c"
            }

        UpdateTheta s ->
            { model = { model | theta = s }
            , command = attemptFocus "theta"
            }

        DoCopy id ->
            { model = model
            , command = CopyId id
            }



{- Triangle formulae

   a = opposite
   b = adjacent
   c = hypotenuse
   theta = angle

   sin(theta) = a/c

   cos(theta) = b/c

   tan(theta) = a/b


   a = c * sin(theta) = b * tan(theta)

   b = c * cos(theta) = a / tan(theta)

   c = a / sin(theta) = b / cos(theta)

   theta = asin(a/c) = acos(b/c) = atan(a/b)
 -}


undegrees : Float -> Float
undegrees rad =
    rad * 180 / Math.pi


view : Model -> Browser.Document Msg
view model =
    let
        parsedModel =
            { b = String.toFloat model.b
            , a = String.toFloat model.a
            , c = String.toFloat model.c
            , theta = String.toFloat model.theta
            }

        emptyResult =
            { b = Nothing
            , a = Nothing
            , c = Nothing
            , theta = Nothing
            }

        error =
            Ok {}
                |> Result.andThen
                        (\_ ->
                            when parsedModel.theta is
                                Just theta ->
                                    if theta <= 0 || theta >= 90 then
                                        Err "error: Î¸ should be between 0 and 90 degrees"
                                    else
                                        Ok {}

                                _ ->
                                    Ok {}
                        )
                |> Result.andThen
                        (\_ ->
                            when Maybe.map2 (>) parsedModel.a parsedModel.c is
                                Just True ->
                                    Err "error: A should be less than C"

                                _ ->
                                    Ok {}
                        )
                |> Result.andThen
                        (\_ ->
                            when Maybe.map2 (>) parsedModel.b parsedModel.c is
                                Just True ->
                                    Err "error: B should be less than C"

                                _ ->
                                    Ok {}
                        )

        -- 6 dp
        formatF : Float -> Maybe Float
        formatF value =
            when error is
                Err _ ->
                    Just (0 / 0)

                _ ->
                    Just (toFloat (Math.round (value * 1000000)) / 1000000)

        res =
            when parsedModel is
                { a = Just a, b = Just b, c = Nothing, theta = Nothing } ->
                    let
                        theta =
                            Math.atan (a / b)

                        c =
                            Math.sqrt (a * a + b * b)
                    in
                    { emptyResult
                        | c = formatF c
                        , theta = formatF (undegrees theta)
                    }

                { a = Just a, b = Nothing, c = Just c, theta = Nothing } ->
                    let
                        theta =
                            Math.asin (a / c)

                        b =
                            c * Math.cos theta
                    in
                    { emptyResult
                        | b = formatF b
                        , theta = formatF (undegrees theta)
                    }

                { a = Just a, b = Nothing, c = Nothing, theta = Just theta_d } ->
                    let
                        theta =
                            Math.degrees theta_d

                        b =
                            a / Math.tan theta

                        c =
                            a / Math.sin theta
                    in
                    { emptyResult
                        | b = formatF b
                        , c = formatF c
                    }

                { a = Nothing, b = Just b, c = Just c, theta = Nothing } ->
                    let
                        theta =
                            Math.acos (b / c)

                        a =
                            c * Math.sin theta
                    in
                    { emptyResult
                        | a = formatF a
                        , theta = formatF (undegrees theta)
                    }

                { a = Nothing, b = Just b, c = Nothing, theta = Just theta_d } ->
                    let
                        theta =
                            Math.degrees theta_d

                        a =
                            b * Math.tan theta

                        c =
                            b / Math.cos theta
                    in
                    { emptyResult
                        | a = formatF a
                        , c = formatF c
                    }

                { a = Nothing, b = Nothing, c = Just c, theta = Just theta_d } ->
                    let
                        theta =
                            Math.degrees theta_d

                        a =
                            c * Math.sin theta

                        b =
                            c * Math.cos theta
                    in
                    { emptyResult
                        | a = formatF a
                        , b = formatF b
                    }

                _ ->
                    emptyResult
    in
    { title = "Triangles"
    , body =
        [ a
            [ class "left"
            , href "#/"
            ]
            [ text "Home"
            ]
        , div
            [ id "triangle"
            , class "center"
            ]
            [ h1
                []
                [ text "Triangles"
                ]
            , br [] []
            , svg
                [ width "600"
                , height "400"
                ]
                [ filter
                    [ id "inset-shadow"
                    ]
                    [ feOffset
                        [ dx "0"
                        , dy "1"
                        ]
                        []
                    , feGaussianBlur
                        [ stdDeviation "2"
                        , result "offset-blur"
                        ]
                        []
                    , feComposite
                        [ operator "out"
                        , in_ "SourceGraphic"
                        , in2 "offset-blur"
                        , result "inverse"
                        ]
                        []
                    , feFlood
                        [ floodColor "black"
                        , floodOpacity "0.4"
                        , result "color"
                        ]
                        []
                    , feComposite
                        [ operator "in"
                        , in_ "color"
                        , in2 "inverse"
                        , result "shadow"
                        ]
                        []
                    , feComposite
                        [ operator "over"
                        , in_ "shadow"
                        , in2 "SourceGraphic"
                        ]
                        []
                    ]
                , polygon
                    [ fill "var(--background)"
                    , stroke "var(--background)"
                    , points
                        (if getButtonExists res.a model.a then
                            "150,50 590,335 150,335 150,230 197,230 200,227 200,188 197,185 150,185"
                         else
                            "150,50 590,335 150,335 150,230 162,230 165,227 165,188 162,185 150,185"
                        )
                    , style "filter" "url(#inset-shadow)"
                    , strokeLinejoin "round"
                    , strokeWidth "5"
                    ]
                    []
                , makeInput
                    { label = "A"
                    , idTxt = "a"
                    , stepV = 0.1
                    , calcVal = res.a
                    , currTxt = model.a
                    , updateMsg = UpdateA
                    , xI = 100
                    , yI = 200
                    , w = 200
                    }
                , makeInput
                    { label = "B"
                    , idTxt = "b"
                    , stepV = 0.1
                    , calcVal = res.b
                    , currTxt = model.b
                    , updateMsg = UpdateB
                    , xI = 370
                    , yI = 400 - 30
                    , w = 200
                    }
                , makeInput
                    { label = "C"
                    , idTxt = "c"
                    , stepV = 0.1
                    , calcVal = res.c
                    , currTxt = model.c
                    , updateMsg = UpdateC
                    , xI = 450
                    , yI = 150
                    , w = 200
                    }
                , makeInput
                    { label = "Î¸"
                    , idTxt = "theta"
                    , stepV = 0.1
                    , calcVal = res.theta
                    , currTxt = model.theta
                    , updateMsg = UpdateTheta
                    , xI = 475
                    , yI = 310
                    , w = 150
                    }
                ]
            , when error is
                Err e ->
                    div
                        [ class "center"
                        ]
                        [ text e
                        ]

                _ ->
                    text ""
            ]
        ]
    }


type alias InputData =
    { label : String
    , idTxt : String
    , stepV : Float
    , calcVal : Maybe Float
    , currTxt : String
    , updateMsg : String -> Msg
    , xI : Int
    , yI : Int
    , w : Int
    }


makeInput : InputData -> Svg Msg
makeInput { label, idTxt, stepV, calcVal, currTxt, updateMsg, xI, yI, w } =
    let
        inputAttArr =
            [ id idTxt
            , type_ "number"
            , step (String.fromFloat stepV)
            , style "width" (String.fromInt (w - 55) ++ "px")
            ]
    in
    foreignObject
        [ width (String.fromInt w)
        , height "60"
        , x (String.fromInt (xI - w // 2))
        , y (String.fromInt (yI - 30))
        ]
        [ div
            []
            [ text label
            , text "Â Â Â Â Â Â Â Â Â "
            , br [] []
            , when calcVal is
                Just t ->
                    input
                        ([ value (String.fromFloat t)
                         , readonly True
                         ]
                            ++ inputAttArr
                        )
                        []

                Nothing ->
                    input
                        ([ value currTxt
                         , onInput updateMsg
                         ]
                            ++ inputAttArr
                        )
                        []
            , if getButtonExists calcVal currTxt then
                when calcVal is
                    Just t ->
                        button
                            [ onClick (DoCopy idTxt)
                            ]
                            [ text "ð"
                            ]

                    Nothing ->
                        button
                            [ onClick (updateMsg "")
                            ]
                            [ text "â"
                            ]
              else
                button
                    [ style "pointer-events" "none"
                    , style "visibility" "hidden"
                    , tabindex -1
                    ]
                    [ text "ðï¸"
                    ]
            ]
        ]


getButtonExists : Maybe Float -> String -> Bool
getButtonExists calcVal currTxt =
    when calcVal is
        Just t ->
            if isNaN t || isInfinite t then
                False
            else
                True

        Nothing ->
            if String.isEmpty currTxt then
                False
            else
                True
