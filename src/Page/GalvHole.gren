module Page.GalvHole exposing ( Model, Msg(..), update, view, queryParser, queryBuilder )

{-| The galvanising hole page
-}

import Browser
import Browser.Dom as Dom
import Html exposing ( Html, a, br, button, div, h1, hr, input, text )
import Html.Attributes exposing ( class, href, id, readonly, step, style, tabindex, type_, value )
import Html.Events exposing ( onClick, onInput )
import Math
import SpaCmd exposing ( SpaCmd(..) )
import Task
import Url.Builder as Builder
import Url.Parser.Query as Query


queryParser : Query.Parser Model
queryParser =
    Query.map4
        (\profileTypeMaybe sizeMaybe nMaybe internal ->
            let
                profileType =
                    Maybe.withDefault "" profileTypeMaybe

                size =
                    Maybe.withDefault "" sizeMaybe

                n =
                    Maybe.withDefault "4" nMaybe

                internalB =
                    when internal is
                        Nothing ->
                            False

                        Just "no" ->
                            False

                        Just _ ->
                            True
            in
            when profileType is
                "RHS" ->
                    makeRhsModel n False size internalB

                "SHS" ->
                    makeRhsModel n False size internalB

                "CHS" ->
                    makeChsModel n False size internalB

                _ ->
                    makeRhsModel n False size internalB
        )
        (Query.string "profileType")
        (Query.string "size")
        (Query.string "n")
        (Query.string "internal")


maybeAppend : Maybe a -> Array a -> Array a
maybeAppend item arr =
    when item is
        Nothing ->
            arr

        Just itemv ->
            Array.pushLast itemv arr


queryBuilder : Model -> Array Builder.QueryParameter
queryBuilder model =
    [ Builder.string
        "profileType"
        (when model.ty is
            Chs ->
                "CHS"

            Rhs ->
                "RHS"
        )
    , Builder.string "size" model.size
    , Builder.string "n" model.n
    ]
        |> maybeAppend
                (if model.internal then
                    Just (Builder.string "internal" "yes")
                 else
                    Nothing)


makeRhsModel : String -> Bool -> String -> Bool -> Model
makeRhsModel n c size internal =
    when String.split "*" size is
        [ x, y ] ->
            checkCustom
                { ty = Rhs
                , size = x ++ "*" ++ y
                , c = c
                , n = n
                , internal = internal
                }

        _ ->
            modelForTy n Rhs internal


makeChsModel : String -> Bool -> String -> Bool -> Model
makeChsModel n c size internal =
    checkCustom
        { ty = Chs
        , size = size
        , c = c
        , n = n
        , internal = internal
        }


checkCustom : Model -> Model
checkCustom model =
    let
        library =
            when model.ty is
                Chs ->
                    chsLibrary

                Rhs ->
                    rhsLibrary

        custom =
            model.c || not (Array.member model.size library)
    in
    { model | c = custom }


type alias Model =
    { ty : ModelTy
    , size : String
    , c : Bool
    , n : String
    , internal : Bool
    }


type ModelTy
    = Rhs
    | Chs


type alias Updated =
    { model : Model
    , command : SpaCmd Msg
    }


type Msg
    = UpdateTy ModelTy
    | UpdateSizeS String
    | UpdateSizeC String
    | UpdateN String
    | UpdateInternal Bool
    | DoCopy String
    | NoOp


update : Msg -> Model -> Updated
update msg model =
    when msg is
        NoOp ->
            { model = model
            , command = SpaCmd.none
            }

        UpdateTy ty ->
            { model = modelForTy model.n ty model.internal
            , command = SpaCmd.none
            }

        UpdateSizeS s ->
            { model =
                { model
                    | size = s
                    , c = False
                }
            , command = SpaCmd.none
            }

        UpdateSizeC s ->
            { model =
                { model
                    | size = s
                    , c = True
                }
            , command = SpaCmd.none
            }

        UpdateN n ->
            { model = { model | n = n }
            , command = BaseCmd (Task.attempt (\_ -> NoOp) (Dom.focus "n"))
            }

        UpdateInternal i ->
            { model =
                { model
                    | internal = i
                }
            , command = SpaCmd.none
            }

        DoCopy id ->
            { model = model
            , command = CopyId id
            }


view : Model -> Browser.Document Msg
view model =
    let
        tyButton =
            when model.ty is
                Chs ->
                    makeButton (UpdateTy Rhs) "CHS"

                Rhs ->
                    makeButton (UpdateTy Chs) "RHS"

        tyInputs =
            when model.ty is
                Chs ->
                    makeChsInputs model

                Rhs ->
                    makeRhsInputs model

        tyCalc :
            Result
                String
                { diagonal : Float
                , n : Int
                }
        tyCalc =
            when String.toInt model.n is
                Just n ->
                    let
                        diagonalRes =
                            when model.ty is
                                Chs ->
                                    calculateChsDiagonal model

                                Rhs ->
                                    calculateRhsDiagonal model
                    in
                    diagonalRes
                        |> Result.map
                                (\diagonal ->
                                    { diagonal = diagonal
                                    , n = n
                                    }
                                )

                Nothing ->
                    Err "enter number of holes"
    in
    { title = "Galvanising Holes"
    , body =
        [ a
            [ class "left"
            , href "#/"
            ]
            [ text "Home"
            ]
        , div
            [ id "galv-hole"
            , class "center"
            ]
            [ h1
                []
                [ text "Galvanising Holes"
                ]
            , br [] []
            , tyButton
            , hr [] []
            , tyInputs
            , hr [] []
            , makeButton
                (UpdateInternal (not model.internal))
                (if model.internal then
                    "Internal holes"
                 else
                    "External holes")
            , hr [] []
            , makeInput
                (if model.internal then
                    "No. of holes in internal connection"
                 else
                    "Total no. of holes in void")
                "n" 1 model.n UpdateN
            , hr [] []
            , when tyCalc is
                Err e ->
                    div
                        [ class "center"
                        ]
                        [ text e
                        ]

                Ok { diagonal, n } ->
                    let
                        -- see https://gaa.com.au/venting-draining-guide/
                        --
                        -- Seems to be equivalent required diameter, apart from the connections say
                        -- a total of at least 50% of the internal diameter of the connecting section
                        -- (which would presumably be met by the two holes each with a diameter of
                        -- diagonal / 4)
                        totalAreaDividedByPi =
                            -- equivalent area to two holes with a diameter of a quarter of the diagonal
                            (diagonal / 8) * (diagonal / 8) * 2

                        -- we skip an extra multiply and divide by pi
                        basisHoleRadius =
                            Math.sqrt (totalAreaDividedByPi / toFloat n)

                        finalHoleDiameter =
                            max 10 (basisHoleRadius * 2)

                        finalTotalArea =
                            (finalHoleDiameter / 2) * (finalHoleDiameter / 2) * Math.pi * toFloat n

                        -- 2 dp
                        formatF : Float -> Float
                        formatF value =
                            toFloat (Math.round (value * 100)) / 100
                    in
                    div
                        [ class "center"
                        ]
                        [ makeOutput "Diagonal (mm)" "diagonal" (formatF diagonal)
                        , makeOutput "Required total area (mm²)" "totalArea" (formatF (totalAreaDividedByPi * Math.pi))
                        , makeOutput "Min diameter (mm)" "dia" (formatF finalHoleDiameter)
                        , makeOutput "Final total area (mm²)" "finalTotalArea" (formatF finalTotalArea)
                        ]
            ]
        ]
    }



-- Circular Hollow Section


calculateChsDiagonal : Model -> Result String Float
calculateChsDiagonal model =
    when String.toFloat model.size is
        Just od ->
            Ok od

        Nothing ->
            Err "enter an outside diameter"


makeChsInputs : Model -> Html Msg
makeChsInputs model =
    let
        arraySel : Maybe (Array (Html Msg))
        arraySel =
            if model.c then
                Nothing
            else
                makeArraySelector chsLibrary model.size

        isStandard =
            Array.member model.size chsLibrary
    in
    div
        []
        (when arraySel is
            Just a ->
                a

            Nothing ->
                [ makeButton
                    (if isStandard then
                        UpdateSizeS model.size
                     else
                        UpdateSizeS "48.3"
                    )
                    "Custom"
                , makeInput "Outer Diameter" "od" 0.5 model.size UpdateSizeC
                ]
        )



-- Rectangular Hollow Section


calculateRhsDiagonal : Model -> Result String Float
calculateRhsDiagonal model =
    when getRhsVals model.size is
        { x = Just x, y = Just y } ->
            Ok (Math.sqrt (x * x + y * y))

        { x = Nothing } ->
            Err "enter a width"

        { y = Nothing } ->
            Err "enter a height"


makeRhsInputs : Model -> Html Msg
makeRhsInputs model =
    let
        { x, y } =
            getRhsStrings model.size

        arraySel : Maybe (Array (Html Msg))
        arraySel =
            if model.c then
                Nothing
            else
                makeArraySelector rhsLibrary model.size

        isStandard =
            Array.member model.size rhsLibrary
    in
    div
        []
        (when arraySel is
            Just a ->
                a

            Nothing ->
                [ makeButton
                    (if isStandard then
                        UpdateSizeS model.size
                     else
                        UpdateSizeS "75*75"
                    )
                    "Custom"
                , makeInput "Width" "x" 0.5 x (\nx -> UpdateSizeC (nx ++ "*" ++ y))
                , makeInput "Height" "y" 0.5 y (\ny -> UpdateSizeC (x ++ "*" ++ ny))
                ]
        )


getRhsStrings :
    String
    -> { x : String
       , y : String
       }
getRhsStrings size =
    when String.split "*" size is
        [ x, y ] ->
            { x = x
            , y = y
            }

        _ ->
            { x = ""
            , y = ""
            }


getRhsVals :
    String
    -> { x : Maybe Float
       , y : Maybe Float
       }
getRhsVals size =
    let
        { x, y } =
            getRhsStrings size
    in
    { x = String.toFloat x
    , y = String.toFloat y
    }



-- Libraries


rhsLibrary : Array String
rhsLibrary =
    [ "20*20"
    , "25*25"
    , "30*30"
    , "35*35"
    , "40*40"
    , "50*20"
    , "50*25"
    , "50*50"
    , "65*35"
    , "65*65"
    , "75*25"
    , "75*50"
    , "75*75"
    , "76*38"
    , "89*89"
    , "90*90"
    , "100*50"
    , "100*100"
    , "102*76"
    , "125*75"
    , "125*125"
    , "127*51"
    , "150*50"
    , "150*100"
    , "150*150"
    , "152*76"
    , "200*100"
    , "200*200"
    , "250*150"
    , "250*250"
    , "300*200"
    , "300*300"
    , "350*350"
    , "400*200"
    , "400*300"
    , "400*400"
    ]


chsLibrary : Array String
chsLibrary =
    [ "21.3"
    , "26.9"
    , "33.7"
    , "42.4"
    , "48.3"
    , "60.3"
    , "76.1"
    , "88.9"
    , "101.6"
    , "114.3"
    , "127"
    , "139.7"
    , "152.4"
    , "165.1"
    , "168.3"
    , "193.7"
    , "219.1"
    , "273.1"
    , "323.9"
    , "355.6"
    , "406.4"
    , "457"
    , "508"
    , "610"
    ]



-- Shared utilities


modelForTy : String -> ModelTy -> Bool -> Model
modelForTy n ty internal =
    { ty = ty
    , size =
        when ty is
            Rhs ->
                "75*75"

            Chs ->
                "48.3"
    , c = False
    , n = n
    , internal = internal
    }


makeArraySelector : Array String -> String -> Maybe (Array (Html Msg))
makeArraySelector library val =
    let
        getIndex : Int -> Maybe Int
        getIndex pos =
            when Array.get pos library is
                Just v ->
                    if v == val then
                        Just pos
                    else
                        getIndex (pos + 1)

                Nothing ->
                    Nothing

        idxMaybe =
            getIndex 0

        makeArraySelectorInternal : Int -> Array (Html Msg)
        makeArraySelectorInternal idx =
            let
                prev : String
                prev =
                    when Array.get (idx - 1) library is
                        Just a ->
                            a

                        Nothing ->
                            Array.last library
                                |> Maybe.withDefault "never"

                next : String
                next =
                    when Array.get (idx + 1) library is
                        Just a ->
                            a

                        Nothing ->
                            Array.first library
                                |> Maybe.withDefault "never"
            in
            [ makeButton (UpdateSizeC val) "Standard"
            , br [] []
            , makeButton (UpdateSizeS prev) "←"
            , text " "
            , makeButton (UpdateSizeS next) val
            , text " "
            , makeButton (UpdateSizeS next) "→"
            ]
    in
    idxMaybe
        |> Maybe.map makeArraySelectorInternal


makeButton : Msg -> String -> Html Msg
makeButton click txt =
    button
        [ onClick click
        ]
        [ text txt
        ]


makeInput : String -> String -> Float -> String -> (String -> Msg) -> Html Msg
makeInput label idTxt stepV currTxt updateMsg =
    div
        []
        [ text label
        , br [] []
        , text "         "
        , input
            [ value currTxt
            , onInput updateMsg
            , id idTxt
            , type_ "number"
            , step (String.fromFloat stepV)
            ]
            []
        , if String.isEmpty currTxt then
            button
                [ style "pointer-events" "none"
                , style "opacity" "0"
                , tabindex -1
                ]
                [ text "❌"
                ]
          else
            button
                [ onClick (updateMsg "")
                ]
                [ text "❌"
                ]
        ]


makeOutput : String -> String -> Float -> Html Msg
makeOutput label idTxt calc =
    div
        []
        [ text label
        , br [] []
        , text "         "
        , input
            [ value (String.fromFloat calc)
            , readonly True
            , id idTxt
            , type_ "number"
            ]
            []
        , button
            [ onClick (DoCopy idTxt)
            ]
            [ text "📋"
            ]
        ]


maybeErr : x -> Bool -> Maybe x -> Maybe x
maybeErr err useDefault orig =
    when orig is
        Nothing ->
            if useDefault then
                Just err
            else
                Nothing

        _ ->
            orig
