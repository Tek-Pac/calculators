module Page.KFactor exposing ( Model, Msg(..), update, view, queryParser, queryBuilder )

{-| The k factor page
-}

import Browser
import Browser.Dom as Dom
import Dict
import Html exposing ( Html, a, br, button, div, input, text )
import Html.Attributes exposing ( class, href, id, readonly, step, type_, value )
import Html.Events exposing ( onClick, onInput )
import Math
import SpaCmd exposing ( SpaCmd(..) )
import Task
import Url.Builder as Builder
import Url.Parser.Query as Query


queryParser : Query.Parser Model
queryParser =
    Query.map7
        finishParse
        (Query.string "t")
        (Query.string "r")
        (Query.string "ba")
        (Query.string "a")
        (Query.string "k")
        (Query.string "xa")
        (Query.enum
            "ty"
            (Dict.empty
                |> Dict.set "ba" BendAllowance
                |> Dict.set "xa" ExtraAllowance
            )
        )


finishParse : Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Ty -> Model
finishParse t r ba a k xa ty =
    { t = Maybe.withDefault "" t
    , r = Maybe.withDefault "" r
    , ba = Maybe.withDefault "" ba
    , a = Maybe.withDefault "90" a
    , k = Maybe.withDefault "" k
    , xa = Maybe.withDefault "" xa
    , ty = Maybe.withDefault ExtraAllowance ty
    }


builderStr : String -> String -> String -> Maybe Builder.QueryParameter
builderStr default key val =
    if val == default then
        Nothing
    else
        Just (Builder.string key val)


queryBuilder : Model -> Array Builder.QueryParameter
queryBuilder model =
    [ builderStr "" "t" model.t
    , builderStr "" "r" model.r
    , builderStr "" "ba" model.ba
    , builderStr "90" "a" model.a
    , builderStr "" "k" model.k
    , builderStr "" "xa" model.xa
    , Just
        (Builder.string
            "ty"
            (when model.ty is
                BendAllowance ->
                    "ba"

                ExtraAllowance ->
                    "xa"
            )
        )
    ]
        |> Array.mapAndKeepJust identity


type alias Model =
    { t : String
    , r : String
    , ba : String
    , a : String
    , k : String
    , xa : String
    , ty : Ty
    }


type Ty
    = BendAllowance
    | ExtraAllowance


type alias Updated =
    { model : Model
    , command : SpaCmd Msg
    }


type Msg
    = UpdateThickness String
    | UpdateRadius String
    | UpdateAllowance String
    | UpdateExtraAllowance String
    | UpdateAngle String
    | UpdateKFactor String
    | UpdateTy Ty
        -- id
    | DoCopy String
    | NoOp


attemptFocus : String -> SpaCmd Msg
attemptFocus id =
    BaseCmd (Task.attempt (\_ -> NoOp) (Dom.focus id))


update : Msg -> Model -> Updated
update msg model =
    when msg is
        NoOp ->
            { model = model
            , command = SpaCmd.none
            }

        UpdateThickness s ->
            { model = { model | t = s }
            , command = attemptFocus "thickness"
            }

        UpdateRadius s ->
            { model = { model | r = s }
            , command = attemptFocus "radius"
            }

        UpdateAllowance s ->
            { model = { model | ba = s }
            , command = attemptFocus "bend-allowance"
            }

        UpdateExtraAllowance s ->
            { model = { model | xa = s }
            , command = attemptFocus "extra-allowance"
            }

        UpdateAngle s ->
            { model = { model | a = s }
            , command = attemptFocus "angle"
            }

        UpdateKFactor s ->
            { model = { model | k = s }
            , command = attemptFocus "k-factor"
            }

        UpdateTy ty ->
            { model = { model | ty = ty }
            , command = SpaCmd.none
            }

        DoCopy id ->
            { model = model
            , command = CopyId id
            }


type alias ParsedResult =
    { t : Maybe Float
    , r : Maybe Float
    , ba : Maybe Float
    , a : Maybe Float
    , k : Maybe Float
    , xa : Maybe Float
    , ty : Ty
    }


emptyResult =
    { t = Nothing
    , r = Nothing
    , ba = Nothing
    , a = Nothing
    , k = Nothing
    , xa = Nothing
    }


parseModel : Model -> ParsedResult
parseModel model =
    let
        t =
            String.toFloat model.t

        r =
            String.toFloat model.r

        ba =
            String.toFloat model.ba

        a =
            String.toFloat model.a

        k =
            String.toFloat model.k

        xa =
            String.toFloat model.xa
    in
    { t = t
    , r = r
    , ba = ba
    , a = a
    , k = k
    , xa = xa
    , ty = model.ty
    }



{- K Factor Formula


t = material thickness
r = bend radius
b = bend allowance
a = bend angle from horizontal (degrees)
k = K Factor
x = extra allowance (our own creation)

k = (-r + b / (pi * a / 180)) / t
 -}


view : Model -> Browser.Document Msg
view model =
    let
        parsedModel =
            parseModel model

        -- 10 dp
        formatF : Float -> Maybe Float
        formatF value =
            Just (toFloat (Math.round (value * 10000000000)) / 10000000000)

        -- 6 dp
        formatFLow : Float -> Maybe Float
        formatFLow value =
            Just (toFloat (Math.round (value * 1000000)) / 1000000)

        res =
            when parsedModel is
                { t = Just t, r = Just r, ba = Just ba, a = Just a, k = Nothing, ty = BendAllowance } ->
                    { emptyResult | k = formatF ((-r + (180 * ba) / (a * Math.pi)) / t) }

                { t = Just t, r = Just r, ba = Just ba, a = Nothing, k = Just k, ty = BendAllowance } ->
                    { emptyResult | a = formatFLow (ba / (Math.pi * (k * t + r) / 180)) }

                { t = Just t, r = Just r, ba = Nothing, a = Just a, k = Just k, ty = BendAllowance } ->
                    { emptyResult | ba = formatFLow ((Math.pi * (k * t + r)) / 180 * a) }

                { t = Just t, r = Nothing, ba = Just ba, a = Just a, k = Just k, ty = BendAllowance } ->
                    { emptyResult | r = formatFLow -(k * t - 180 * ba / (Math.pi * a)) }

                { t = Nothing, r = Just r, ba = Just ba, a = Just a, k = Just k, ty = BendAllowance } ->
                    { emptyResult | t = formatFLow ((-r + ba / (Math.pi * a / 180)) / k) }

                -- Extra allowance (assuming a == 90)
                { t = Just t, r = Just r, xa = Just xa, k = Nothing, ty = ExtraAllowance } ->
                    { emptyResult | k = formatF ((((xa + 2 * r) * 2 / Math.pi) - r) / t) }

                { t = Just t, r = Just r, xa = Nothing, k = Just k, ty = ExtraAllowance } ->
                    { emptyResult | xa = formatFLow (Math.pi * (k * t + r) / 2 - 2 * r) }

                { t = Just t, r = Nothing, xa = Just xa, k = Just k, ty = ExtraAllowance } ->
                    { emptyResult | r = formatFLow ((2 * xa - Math.pi * k * t) / (Math.pi - 360)) }

                { t = Nothing, r = Just r, xa = Just xa, k = Just k, ty = ExtraAllowance } ->
                    { emptyResult | t = formatFLow ((2 * xa + 4 * r) / (Math.pi * k) - r / k) }

                _ ->
                    emptyResult

        makeInputDiv : String -> String -> String -> Maybe Float -> String -> (String -> Msg) -> Html Msg
        makeInputDiv txt idTxt stepV calcF modelT msgF =
            div
                []
                [ text txt
                , br [] []
                , when calcF is
                    Just t ->
                        input
                            [ value (String.fromFloat t)
                            , readonly True
                            , id idTxt
                            , type_ "number"
                            , step stepV
                            ]
                            []

                    Nothing ->
                        input
                            [ value modelT
                            , onInput msgF
                            , id idTxt
                            , type_ "number"
                            , step stepV
                            ]
                            []
                , when calcF is
                    Just t ->
                        button
                            [ onClick (DoCopy idTxt)
                            ]
                            [ text "📋"
                            ]

                    Nothing ->
                        if String.isEmpty modelT then
                            text ""
                        else
                            button
                                [ onClick (msgF "")
                                ]
                                [ text "❌"
                                ]
                ]

        makeSwapButton : Ty -> Html Msg
        makeSwapButton updatedTy =
            button
                [ onClick (UpdateTy updatedTy)
                ]
                [ text "Swap"
                ]
    in
    { title = "K Factors"
    , body =
        [ a
            [ class "left"
            , href "#/"
            ]
            [ text "Home"
            ]
        , div
            [ id "k-factor-div"
            , class "center"
            ]
            [ when model.ty is
                ExtraAllowance ->
                    text "Extra Allowance "

                BendAllowance ->
                    text "Bend Allowance "
            , when model.ty is
                ExtraAllowance ->
                    makeSwapButton BendAllowance

                BendAllowance ->
                    makeSwapButton ExtraAllowance
            , makeInputDiv "Thickness:" "thickness" "0.1" res.t model.t UpdateThickness
            , makeInputDiv "Radius:" "radius" "0.1" res.r model.r UpdateRadius
            , if model.ty == BendAllowance then
                makeInputDiv "Bend Allowance:" "bend-allowance" "0.05" res.ba model.ba UpdateAllowance
              else
                makeInputDiv "Extra Allowance:" "extra-allowance" "0.05" res.xa model.xa UpdateExtraAllowance
            , if model.ty == BendAllowance then
                makeInputDiv "Angle:" "angle" "1" res.a model.a UpdateAngle
              else
                text ""
            , makeInputDiv "K Factor:" "k-factor" "0.001" res.k model.k UpdateKFactor
            ]
        ]
    }
