module Page.KFactor exposing ( Model, Msg, init, update, view )

{-| The k factor page
-}

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Math
import PageId
import SpaCmd exposing ( SpaCmd(..) )


type alias Model =
    { t : String
    , r : String
    , ba : String
    , a : String
    , k : String
    , xa : String
    , ty : Ty
    }


type Ty
    = BendAllowance
    | ExtraAllowance


type alias Updated =
    { model : Model
    , command : SpaCmd Msg
    }


init : Model
init =
    { t = ""
    , r = ""
    , ba = ""
    , a = "90"
    , k = ""
    , xa = ""
    , ty = BendAllowance
    }


type Msg
    = HomePage
    | UpdateThickness String
    | UpdateRadius String
    | UpdateAllowance String
    | UpdateExtraAllowance String
    | UpdateAngle String
    | UpdateKFactor String
    | UpdateTy Ty


update : Msg -> Model -> Updated
update msg model =
    case msg of
        HomePage ->
            { model = model
            , command = ChangePage PageId.Home
            }

        UpdateThickness s ->
            { model = { model | t = s }
            , command = SpaCmd.none
            }

        UpdateRadius s ->
            { model = { model | r = s }
            , command = SpaCmd.none
            }

        UpdateAllowance s ->
            { model = { model | ba = s }
            , command = SpaCmd.none
            }

        UpdateExtraAllowance s ->
            { model = { model | xa = s }
            , command = SpaCmd.none
            }

        UpdateAngle s ->
            { model = { model | a = s }
            , command = SpaCmd.none
            }

        UpdateKFactor s ->
            { model = { model | k = s }
            , command = SpaCmd.none
            }

        UpdateTy ty ->
            { model = { model | ty = ty }
            , command = SpaCmd.none
            }


type alias ParsedResult =
    { t : Maybe Float
    , r : Maybe Float
    , ba : Maybe Float
    , a : Maybe Float
    , k : Maybe Float
    , xa : Maybe Float
    , ty : Ty
    }


emptyResult =
    { t = Nothing
    , r = Nothing
    , ba = Nothing
    , a = Nothing
    , k = Nothing
    , xa = Nothing
    }


parseModel : Model -> ParsedResult
parseModel model =
    let
        t =
            String.toFloat model.t

        r =
            String.toFloat model.r

        ba =
            String.toFloat model.ba

        a =
            String.toFloat model.a

        k =
            String.toFloat model.k

        xa =
            String.toFloat model.xa
    in
    { t = t
    , r = r
    , ba = ba
    , a = a
    , k = k
    , xa = xa
    , ty = model.ty
    }



{- K Factor Formula


t = material thickness
r = bend radius
b = bend allowance
a = bend angle from horizontal (degrees)
k = K Factor
x = extra allowance (our own creation)

k = (-r + b / (pi * a / 180)) / t
 -}


view : Model -> Browser.Document Msg
view model =
    let
        parsedModel =
            parseModel model

        formatF : Float -> Maybe Float
        formatF value =
            Just (toFloat (Math.round (value * 10000000000)) / 10000000000)

        res =
            case parsedModel of
                { t = Just t, r = Just r, ba = Just ba, a = Just a, k = Nothing, ty = BendAllowance } ->
                    { emptyResult | k = Just ((-r + (180 * ba) / (a * Math.pi)) / t) }

                { t = Just t, r = Just r, ba = Just ba, a = Nothing, k = Just k, ty = BendAllowance } ->
                    { emptyResult | a = Just (ba / (Math.pi * (k * t + r) / 180)) }

                { t = Just t, r = Just r, ba = Nothing, a = Just a, k = Just k, ty = BendAllowance } ->
                    { emptyResult | ba = Just ((Math.pi * (k * t + r)) / 180 * a) }

                { t = Just t, r = Nothing, ba = Just ba, a = Just a, k = Just k, ty = BendAllowance } ->
                    { emptyResult | r = Just -(k * t - 180 * ba / (Math.pi * a)) }

                { t = Nothing, r = Just r, ba = Just ba, a = Just a, k = Just k, ty = BendAllowance } ->
                    { emptyResult | t = Just ((-r + ba / (Math.pi * a / 180)) / k) }

                -- Extra allowance (assuming a == 90)
                { t = Just t, r = Just r, xa = Just xa, k = Nothing, ty = ExtraAllowance } ->
                    { emptyResult | k = Just ((((xa + 2 * r) * 2 / Math.pi) - r) / t) }

                { t = Just t, r = Just r, xa = Nothing, k = Just k, ty = ExtraAllowance } ->
                    { emptyResult | xa = Just (Math.pi * (k * t + r) / 2 - 2 * r) }

                { t = Just t, r = Nothing, xa = Just xa, k = Just k, ty = ExtraAllowance } ->
                    { emptyResult | r = Just ((2 * xa - Math.pi * k * t) / (Math.pi - 360)) }

                { t = Nothing, r = Just r, xa = Just xa, k = Just k, ty = ExtraAllowance } ->
                    { emptyResult | t = Just ((2 * xa + 4 * r) / (Math.pi * k) - r / k) }

                _ ->
                    emptyResult

        makeInputDiv txt input =
            div
                []
                [ text txt
                , br [] []
                , input
                ]
    in
    { title = "K Factors"
    , body =
        [ button
            [ class "left"
            , onClick HomePage
            ]
            [ text "Home"
            ]
        , div
            [ id "k-factor"
            , class "center"
            ]
            [ case model.ty of
                ExtraAllowance ->
                    button
                        [ onClick (UpdateTy BendAllowance)
                        ]
                        [ text "Extra Allowance"
                        ]

                BendAllowance ->
                    button
                        [ onClick (UpdateTy ExtraAllowance)
                        ]
                        [ text "Bend Allowance"
                        ]
            , makeInputDiv
                "Thickness:"
                (case res.t of
                    Just t ->
                        text (String.fromFloat t)

                    Nothing ->
                        input
                            [ value model.t
                            , onInput UpdateThickness
                            ]
                            []
                )
            , makeInputDiv
                "Radius:"
                (case res.r of
                    Just r ->
                        text (String.fromFloat r)

                    Nothing ->
                        input
                            [ value model.r
                            , onInput UpdateRadius
                            ]
                            []
                )
            , if model.ty == BendAllowance then
                makeInputDiv
                    "Bend Allowance:"
                    (case res.ba of
                        Just ba ->
                            text (String.fromFloat ba)

                        Nothing ->
                            input
                                [ value model.ba
                                , onInput UpdateAllowance
                                ]
                                []
                    )
              else
                makeInputDiv
                    "Extra Allowance:"
                    (case res.xa of
                        Just xa ->
                            text (String.fromFloat xa)

                        Nothing ->
                            input
                                [ value model.xa
                                , onInput UpdateExtraAllowance
                                ]
                                []
                    )
            , if model.ty == BendAllowance then
                makeInputDiv
                    "Angle:"
                    (case res.a of
                        Just a ->
                            text (String.fromFloat a)

                        Nothing ->
                            input
                                [ value model.a
                                , onInput UpdateAngle
                                ]
                                []
                    )
              else
                text ""
            , makeInputDiv
                "K Factor:"
                (case res.k of
                    Just k ->
                        text (String.fromFloat k)

                    Nothing ->
                        input
                            [ value model.k
                            , onInput UpdateKFactor
                            ]
                            []
                )
            ]
        ]
    }
