port module Main exposing (..)

import Browser
import Html exposing (..)
import Page.Home as Home
import Page.KFactor as KFactor
import Page.Triangle as Triangle
import SpaCmd exposing ( SpaCmd(..) )
import Url exposing ( Url )
import Url.Builder as Builder
import Url.Parser as Parser exposing ( (<?>), Parser )


port changePage : String -> Cmd msg


port updatePage : String -> Cmd msg


port copyId : String -> Cmd msg


port pageChanged : (String -> msg) -> Sub msg


type Model
    = HomeModel Home.Model
    | KFactorModel KFactor.Model
    | TriangleModel Triangle.Model


type Msg
    = HomeMsg Home.Msg
    | KFactorMsg KFactor.Msg
    | TriangleMsg Triangle.Msg
    | PageChanged String


main : Program String Model Msg
main =
    Browser.document
        { init = init
        , view = view
        , update = update
        , subscriptions = \_ -> pageChangedSubscription
        }


pageChangedSubscription =
    pageChanged PageChanged


init :
    String
    -> { model : Model
       , command : Cmd Msg
       }
init path =
    { model = urlToModel path
    , command = Cmd.none
    }


view : Model -> Browser.Document Msg
view model =
    case model of
        HomeModel m ->
            Home.view m
                |> mapDocument HomeMsg

        KFactorModel m ->
            KFactor.view m
                |> mapDocument KFactorMsg

        TriangleModel m ->
            Triangle.view m
                |> mapDocument TriangleMsg


mapDocument : (a -> Msg) -> Browser.Document a -> Browser.Document Msg
mapDocument map doc =
    { title = doc.title
    , body =
        doc.body
            |> Array.map (Html.map map)
    }


update :
    Msg
    -> Model
    -> { model : Model
       , command : Cmd Msg
       }
update msg model =
    case
        { m = model
        , v = msg
        }
    of
        { v = PageChanged str } ->
            { model = urlToModel str
            , command = Cmd.none
            }

        { m = HomeModel m, v = HomeMsg v } ->
            mapPage HomeModel HomeMsg (Home.update v m)
                |> handleSpaCmd
                |> handleUrlUpdate model

        { m = KFactorModel m, v = KFactorMsg v } ->
            mapPage KFactorModel KFactorMsg (KFactor.update v m)
                |> handleSpaCmd
                |> handleUrlUpdate model

        { m = TriangleModel m, v = TriangleMsg v } ->
            mapPage TriangleModel TriangleMsg (Triangle.update v m)
                |> handleSpaCmd
                |> handleUrlUpdate model

        _ ->
            { model = model
            , command = Cmd.none
            }


handleUrlUpdate :
    Model
    -> { model : Model
       , command : Cmd Msg
       }
    -> { model : Model
       , command : Cmd Msg
       }
handleUrlUpdate orig dat =
    if orig == dat.model then
        dat
    else
        { model = dat.model
        , command =
            Cmd.batch
                [ updatePage (modelToUrl dat.model)
                , dat.command
                ]
        }


mapPage :
    (a -> Model)
    -> (b -> Msg)
    -> { model : a
       , command : SpaCmd b
       }
    -> { model : Model
       , command : SpaCmd Msg
       }
mapPage wrapModel wrapMsg { model, command } =
    { model = wrapModel model
    , command = SpaCmd.map wrapMsg command
    }


handleSpaCmd :
    { model : Model
    , command : SpaCmd Msg
    }
    -> { model : Model
       , command : Cmd Msg
       }
handleSpaCmd { model, command } =
    case command of
        BaseCmd c ->
            { model = model
            , command = c
            }

        ChangePage url ->
            { model = urlToModel url
            , command = changePage url
            }

        CopyId id ->
            { model = model
            , command = copyId id
            }


hashToUrl : String -> Url
hashToUrl str =
    let
        trimmedStr =
            "http://localhost"
                ++ (if String.startsWith "#/" str then
                        String.dropLeft 1 str
                     else
                        "/"
                    )
    in
    Url.fromString trimmedStr
        |> Maybe.withDefault
                { protocol = Url.Http
                , host = ""
                , port_ = Nothing
                , path = "/"
                , query = Nothing
                , fragment = Nothing
                }


urlToModel : String -> Model
urlToModel path =
    let
        url =
            hashToUrl path
    in
    Parser.parse
        (Parser.oneOf
            [ Parser.map (HomeModel Home.init) Parser.top
            , Parser.map KFactorModel (Parser.s "k-factor" <?> KFactor.queryParser)
            , Parser.map (TriangleModel Triangle.init) (Parser.s "triangle")
            ]
        )
        url
        |> Maybe.withDefault (HomeModel Home.init)


modelToUrl : Model -> String
modelToUrl model =
    "#"
        ++ Builder.absolute
                (case model of
                    HomeModel _ ->
                        []

                    TriangleModel _ ->
                        [ "triangle"
                        ]

                    KFactorModel _ ->
                        [ "k-factor"
                        ]
                )
                (case model of
                    HomeModel _ ->
                        []

                    TriangleModel _ ->
                        []

                    KFactorModel k ->
                        KFactor.queryBuilder k
                )
