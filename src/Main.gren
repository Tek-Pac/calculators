port module Main exposing (..)

import Browser
import Html exposing (..)
import Page.Home as Home
import Page.KFactor as KFactor
import PageId exposing ( PageId(..), stringToPageId, pageIdToString )
import SpaCmd exposing ( SpaCmd(..) )


port changePage : String -> Cmd msg


port copyId : String -> Cmd msg


port pageChanged : (String -> msg) -> Sub msg


type Model
    = HomeModel Home.Model
    | KFactorModel KFactor.Model


type Msg
    = HomeMsg Home.Msg
    | KFactorMsg KFactor.Msg
    | PageChanged PageId


main : Program String Model Msg
main =
    Browser.document
        { init = init
        , view = view
        , update = update
        , subscriptions = \_ -> pageChangedSubscription
        }


pageChangedSubscription =
    pageChanged
        (\path ->
            stringToPageId path
                |> Maybe.withDefault Home
                |> PageChanged
        )


init :
    String
    -> { model : Model
       , command : Cmd Msg
       }
init path =
    { model =
        stringToPageId path
            |> Maybe.withDefault Home
            |> modelForPageId
    , command = Cmd.none
    }


view : Model -> Browser.Document Msg
view model =
    case model of
        HomeModel m ->
            Home.view m
                |> mapDocument HomeMsg

        KFactorModel m ->
            KFactor.view m
                |> mapDocument KFactorMsg


mapDocument : (a -> Msg) -> Browser.Document a -> Browser.Document Msg
mapDocument map doc =
    { title = doc.title
    , body =
        doc.body
            |> Array.map (Html.map map)
    }


update :
    Msg
    -> Model
    -> { model : Model
       , command : Cmd Msg
       }
update msg model =
    case
        { m = model
        , v = msg
        }
    of
        { v = PageChanged id } ->
            { model = modelForPageId id
            , command = Cmd.none
            }

        { m = HomeModel m, v = HomeMsg v } ->
            handleSpaCmd (mapPage HomeModel HomeMsg (Home.update v m))

        { m = KFactorModel m, v = KFactorMsg v } ->
            handleSpaCmd (mapPage KFactorModel KFactorMsg (KFactor.update v m))

        _ ->
            { model = model
            , command = Cmd.none
            }


mapPage :
    (a -> Model)
    -> (b -> Msg)
    -> { model : a
       , command : SpaCmd b
       }
    -> { model : Model
       , command : SpaCmd Msg
       }
mapPage wrapModel wrapMsg { model, command } =
    { model = wrapModel model
    , command = SpaCmd.map wrapMsg command
    }


handleSpaCmd :
    { model : Model
    , command : SpaCmd Msg
    }
    -> { model : Model
       , command : Cmd Msg
       }
handleSpaCmd { model, command } =
    case command of
        BaseCmd c ->
            { model = model
            , command = c
            }

        ChangePage id ->
            { model = modelForPageId id
            , command = changePage (pageIdToString id)
            }

        CopyId id ->
            { model = model
            , command = copyId id
            }


modelForPageId : PageId -> Model
modelForPageId id =
    case id of
        Home ->
            HomeModel Home.init

        KFactor ->
            KFactorModel KFactor.init
